/**
 * Hooks for the Milestone module
 * Defines lifecycle hooks and event listeners
 */

import { Milestone } from '../schemas.js';

/**
 * Initialize hooks for the Milestone module
 * @param {Object} ctx - Application context
 * @returns {Object} ctx - Updated application context
 */
export const milestoneHooks = (ctx) => {
  const logger = ctx.logger.child({ module: 'milestone-hooks' });
  
  try {
    logger.debug('Initializing milestone hooks');
    
    // Hook: When a habit completes a streak milestone, create a corresponding milestone
    ctx.events.on('habit:streakMilestoneReached', async (data) => {
      try {
        const { habitId, userId, streakCount, habitTitle } = data;
        
        // Only create milestones for significant streaks
        if (streakCount < 7) return;
        
        // Check if a milestone for this streak already exists
        const existingMilestone = await Milestone.findOne({
          userId,
          milestoneType: 'habit_based',
          relatedHabits: habitId,
          habitStreak: streakCount
        });
        
        if (existingMilestone) return;
        
        // Create a new milestone to celebrate the streak
        const milestone = new Milestone({
          userId,
          title: `${streakCount} day streak for "${habitTitle}"`,
          description: `Maintained "${habitTitle}" habit for ${streakCount} consecutive days.`,
          milestoneType: 'habit_based',
          status: 'achieved',
          completedDate: new Date(),
          progressPercentage: 100,
          habitStreak: streakCount,
          relatedHabits: [habitId],
          metadata: {
            priority: 'medium',
            icon: 'trending_up',
            color: '#4CAF50',
            autoGenerated: true,
            tags: ['habit', 'streak', 'achievement']
          }
        });
        
        await milestone.save();
        logger.info(`Created streak milestone for habit ${habitId} with streak ${streakCount}`);
        
        // Emit an event that the milestone was created
        ctx.events.emit('milestone:created', { milestoneId: milestone._id, milestone });
      } catch (error) {
        logger.error('Error creating streak milestone:', error);
      }
    });
    
    // Hook: When a goal is created, suggest creating milestone steps
    ctx.events.on('goal:created', async (data) => {
      try {
        // Don't actually create milestones automatically, just emit suggestion event
        ctx.events.emit('milestone:suggested', {
          suggestedFor: 'goal',
          goalId: data.goalId,
          userId: data.userId,
          message: 'Consider breaking this goal into milestone steps'
        });
      } catch (error) {
        logger.error('Error processing goal creation for milestone suggestion:', error);
      }
    });
    
    // Hook: When a milestone is achieved, check for parent goal updates
    ctx.events.on('milestone:statusChanged', async (data) => {
      try {
        const { milestoneId, status, userId } = data;
        
        if (status !== 'achieved') return;
        
        const milestone = await Milestone.findById(milestoneId);
        if (!milestone || !milestone.parentGoalId) return;
        
        // Emit event for goal to potentially update its progress
        ctx.events.emit('milestone:achieved', {
          milestoneId,
          parentGoalId: milestone.parentGoalId,
          userId
        });
      } catch (error) {
        logger.error('Error processing milestone achievement:', error);
      }
    });
    
    // Hook: When a habit is archived, update related milestones
    ctx.events.on('habit:archived', async (data) => {
      try {
        const { habitId, userId } = data;
        
        // Find milestones related to this habit
        const relatedMilestones = await Milestone.find({
          userId,
          relatedHabits: habitId,
          status: { $nin: ['achieved', 'abandoned'] }
        });
        
        if (relatedMilestones.length === 0) return;
        
        // Update each milestone to remove the habit reference
        for (const milestone of relatedMilestones) {
          milestone.relatedHabits = milestone.relatedHabits.filter(
            id => id.toString() !== habitId.toString()
          );
          
          // Add a status history note
          if (milestone.addStatusHistoryNote) {
            await milestone.addStatusHistoryNote(
              'Related habit was archived'
            );
          }
          
          await milestone.save();
          logger.info(`Updated milestone ${milestone._id} after habit ${habitId} was archived`);
        }
      } catch (error) {
        logger.error('Error updating milestones after habit archive:', error);
      }
    });
    
    logger.debug('Milestone hooks initialized successfully');
    return ctx;
  } catch (error) {
    logger.error('Error initializing milestone hooks:', error);
    throw error;
  }
};

export default milestoneHooks; 